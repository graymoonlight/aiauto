import { Injectable, OnModuleInit } from '@nestjs/common';
import { Telegraf, Context, Markup } from 'telegraf';
import { Update, PhotoSize } from 'telegraf/typings/core/types/typegram';
import { AuthService } from 'src/auth/auth.service';
import { DeepseekService } from 'src/deepseek/deepseek.service';
import * as fs from 'fs';
import * as path from 'path';
import axios from 'axios';

interface SessionData {
  photoPath: string;
  caption: string;
  generatedText: string;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
type UserAuthState = 'awaiting_login' | 'awaiting_password' | 'authenticated';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: Telegraf<Context>;
  private uploadDir = path.join(__dirname, '..', '..', 'uploads');
  private userSessions = new Map<number, SessionData>();
  private mediaGroupBuffers = new Map<string, { userId: number, photos: PhotoSize[], caption: string, timer: NodeJS.Timeout }>();
  private mediaGroups = new Map<string, { userId: number; photos: PhotoSize[]; caption?: string }>();
  private mediaGroupTimers = new Map<string, NodeJS.Timeout>();

  // –•—Ä–∞–Ω–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  private authenticatedUsers = new Set<number>();

  // –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
  private userAuthStates = new Map<number, { state: UserAuthState; login?: string }>();

  private readonly channelId = process.env.TELEGRAM_CHANNEL_ID as string;

  constructor(
    private deepseek: DeepseekService,
    private authService: AuthService
  ) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN is not defined');
    }

    if (!fs.existsSync(this.uploadDir)) {
      fs.mkdirSync(this.uploadDir, { recursive: true });
    }

    this.bot = new Telegraf(token);
  }

  onModuleInit() {
    this.setupHandlers();
  }

  private setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.bot.start(async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ /start
      this.userSessions.delete(userId);
      this.authenticatedUsers.delete(userId);
      this.userAuthStates.set(userId, { state: 'awaiting_login' });

      await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (ctx, next) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const authState = this.userAuthStates.get(userId);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!this.authenticatedUsers.has(userId)) {
        if (!authState) {
          // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –ª–æ–≥–∏–Ω–∞
          this.userAuthStates.set(userId, { state: 'awaiting_login' });
          await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
          return;
        }

      if (authState.state === 'awaiting_login') {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ª–æ–≥–∏–Ω, –ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª—å
        if (!ctx.message || !('text' in ctx.message)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –≤–∞—à –ª–æ–≥–∏–Ω.');
          return;
        }
        this.userAuthStates.set(userId, { state: 'awaiting_password', login: ctx.message.text });
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
        return;
      }

      if (authState.state === 'awaiting_password') {
        if (!ctx.message || !('text' in ctx.message)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –≤–∞—à –ø–∞—Ä–æ–ª—å.');
          return;
        }

        const login = authState.login!;
        const password = ctx.message.text;

        // –í—ã–∑–æ–≤ –Ω–æ–≤–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const isValid = await this.validateCredentials(login, password);

        if (isValid) {
          this.authenticatedUsers.add(userId);
          this.userAuthStates.delete(userId); // –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ üöóüì∏');
        } else {
          // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
          this.userAuthStates.set(userId, { state: 'awaiting_login' });
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:');
        }
        return;
      }

      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫–æ–µ-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
      await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
      this.userAuthStates.set(userId, { state: 'awaiting_login' });
      return;
    }

    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –≤ —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await next();
  });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    this.bot.action('start', async (ctx) => {
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      if (!userId) return;

      if (!this.authenticatedUsers.has(userId)) {
        await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.');
        return;
      }

      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ üöóüì∏');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    this.bot.on('photo', async (ctx) => {
      const userId = ctx.from?.id;
        if (!userId) return;
        if (!this.authenticatedUsers.has(userId)) {
          await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.');
          return;
        }

        const message = ctx.message;
        const mediaGroupId = message.media_group_id;
        const caption = message.caption || '';

  if (mediaGroupId) {
    // –ï—Å–ª–∏ –∞–ª—å–±–æ–º
    const existing = this.mediaGroupBuffers.get(mediaGroupId);
    if (existing) {
      existing.photos.push(...message.photo);
    } else {
      const timer = setTimeout(async () => {
        const buffer = this.mediaGroupBuffers.get(mediaGroupId);
        if (!buffer) return;

        const bestPhoto = buffer.photos.sort((a, b) => (b.file_size ?? 0) - (a.file_size ?? 0))[0];
        const savedPath = await this.saveBestPhoto(ctx, [bestPhoto]);
        const generatedText = await this.deepseek.generateText(buffer.caption);

        this.userSessions.set(userId, {
          photoPath: savedPath,
          caption: buffer.caption,
          generatedText,
        });

        await ctx.replyWithPhoto(
          { source: fs.createReadStream(savedPath) },
          {
            caption: generatedText,
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
              [{ text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }],
              [{ text: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'regenerate' }],
            ]),
          }
        );

        this.mediaGroupBuffers.delete(mediaGroupId);
      }, 700); // –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ

      this.mediaGroupBuffers.set(mediaGroupId, {
        userId,
        caption,
        photos: [...message.photo],
        timer,
      });
    }

    return;
  }

  // –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
  try {
    const savedPath = await this.saveBestPhoto(ctx, message.photo);
    const generatedText = await this.deepseek.generateText(caption);

    this.userSessions.set(userId, {
      photoPath: savedPath,
      caption,
      generatedText,
    });

    await ctx.replyWithPhoto(
      { source: fs.createReadStream(savedPath) },
      {
        caption: generatedText,
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [{ text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }],
          [{ text: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'regenerate' }],
        ]),
      }
    );
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
  }
});


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query ‚Äî —Ç–æ–∂–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    this.bot.on('callback_query', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      if (!this.authenticatedUsers.has(userId)) {
        return ctx.answerCbQuery('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
      }

      const session = this.userSessions.get(userId);

      if (!session) {
        return ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.');
      }

      if ('data' in ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;

        if (data === 'publish') {
          await ctx.answerCbQuery('–ü—É–±–ª–∏–∫—É–µ–º...');

          await ctx.telegram.sendPhoto(this.channelId, {
            source: fs.createReadStream(session.photoPath),
          }, {
            caption: session.generatedText,
            parse_mode: 'Markdown',
          });

          await ctx.reply('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ. –ù–∏–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞!)');

          fs.unlinkSync(session.photoPath);
          this.userSessions.delete(userId);

        } else if (data === 'regenerate') {
          await ctx.answerCbQuery('–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è...');
          const newText = await this.deepseek.generateText(session.caption);
          session.generatedText = newText;

          await ctx.replyWithPhoto(
            { source: fs.createReadStream(session.photoPath) },
            {
              caption: newText,
              parse_mode: 'Markdown',
              ...Markup.inlineKeyboard([
                [{ text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }],
                [{ text: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'regenerate' }],
              ]),
            }
          );
        }
      } else {
        await ctx.answerCbQuery('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø callback.');
      }
    });
  }

  // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É
  private async validateCredentials(login: string, password: string): Promise<boolean> {
    try {
      await this.authService.validateUser({ username: login, password });
      return true;
    } catch (error) {
      return false;
    }
  }

  private async saveBestPhoto(ctx: Context, photos: PhotoSize[]): Promise<string> {
    const bestPhoto = photos[photos.length - 1];
    const fileId = bestPhoto.file_id;
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const fileName = `${fileId}.jpg`;
    const filePath = path.join(this.uploadDir, fileName);

    const response = await axios.get(fileLink.href, { responseType: 'stream' });
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);

    await new Promise<void>((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });

    return filePath;
  }

  handleUpdate(update: Update) {
    return this.bot.handleUpdate(update);
  }

  async launch() {
    await this.bot.launch();
  }
}
